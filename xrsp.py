# Requires pyusb
import usb.core
import usb.util
import struct
import time

from capnp_parse import CapnpParser
from xrsp_parse import *

# find our device
dev = usb.core.find(idVendor=0x2833) #, idProduct=0x0183

def test(e):
    print(hex(e.bEndpointAddress))
    return False#usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_OUT

# was it found?
if dev is None:
    raise ValueError('Device not found')

#dev.reset()

# set the active configuration. With no arguments, the first
# configuration will be the active one
dev.set_configuration()

# get an endpoint instance
cfg = dev.get_active_configuration()
intf = None
for i in range(0, 10):
    intf = cfg[(i,0)]
    if "XRSP" in str(intf):
        print (intf)
        break


ep_out = usb.util.find_descriptor(
    intf,
    # match the first OUT endpoint
    custom_match = \
    lambda e: \
        usb.util.endpoint_direction(e.bEndpointAddress) == \
        usb.util.ENDPOINT_OUT)

ep_in = usb.util.find_descriptor(
    intf,
    # match the first OUT endpoint
    custom_match = \
    lambda e: \
        usb.util.endpoint_direction(e.bEndpointAddress) == \
        usb.util.ENDPOINT_IN)

try:
    ep_out.clear_halt()
except:
    a='a'

try:
    ep_in.clear_halt()
except:
    a='a'

reply = bytes(b'')

increment = 0

def hex_dump(b):
    p = ""
    b = bytes(b)
    for i in range(0, len(b)):
        if i != 0 and i % 16 == 0:
            p += "\n"
        p += ("%02x " % b[i])
    print (p)

def send_to_topic(topic, msg):
    global increment
    try:
        pkt_out = struct.pack("<BBHHH", 0x10, topic, (len(msg) // 4)+1, increment, 0)
        pkt_out += bytes(msg)
        to_fill = (0x400 - len(pkt_out)) - 6
        pkt_out += struct.pack("<BBHH", 0x10, 0x0, (to_fill // 4)+1, increment)
        #hex_dump(pkt_out)
        pkt_out += b'\x00' * to_fill

        #hex_dump(pkt_out)

        increment += 1

        pkt = TopicPkt(pkt_out)
        pkt.dump()

        #print (hex(len(pkt_out)))

        ep_out.write(pkt_out)
    except usb.core.USBTimeoutError as e:
        print ("Failed to send to topic", hex(topic), e)

def read_xrsp():
    b = b''
    try:
        b += bytes(ep_in.read(0x200))
        b += bytes(ep_in.read(0x200))

        pkt = TopicPkt(b)
        pkt.dump()
    except usb.core.USBTimeoutError as e:
        print ("Failed read", e)
    except usb.core.USBError as e:
        print ("Failed read", e)
    return b

try:
    b = ep_in.read(0x200)
    f = open("dump_test_quest.bin", "wb")
    f.write(bytes(b))
    reply += bytes(b)
    b = ep_in.read(0x200)
    f.write(bytes(b))
    reply += bytes(b)
    f.close()
    hex_dump(reply)

    pkt = TopicPkt(reply)
    pkt.dump()
except usb.core.USBTimeoutError as e:
    print ("Failed first read", e)
except usb.core.USBError as e:
    print ("Failed first read", e)

real_first = [0x82, 0xAC, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
second_send = [0x87, 0x0C, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]
idk_send = [0x89, 0x8C, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
echo_send = [0x06, 0x80, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x2B, 0xDD, 0x3F, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
first_5 = [0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00]
second_5 = [0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00]

send_usb3 = [0x82, 0xAC, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x55, 0x53, 0x42, 0x33, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00]
send_usb3_2 = [0x89, 0xAC, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
send_usb3_3 = [0x87, 0x0C, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

send_1a_1 = struct.pack("<LL", 0, 3)
send_1a_2 = struct.pack("<LLHHLLL", 0, 2, 1, 1, 0, 0, 0)
idk_send_2 = [0x16, 0x80, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x57, 0xEA, 0x17, 0x80, 0x14, 0x11, 0x00, 0x00, 0xBC, 0x77, 0x22, 0xC1, 0x74, 0x00, 0x00, 0x00, 0xF4, 0xDA, 0x22, 0xC1, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
send_2 = [0x4F, 0x9D, 0x1B, 0xE9, 0x94, 0xEC, 0x05, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

print ("First send")
send_to_topic(1, real_first)

print ("First read")
ret = read_xrsp()

print ("idk send")
send_to_topic(1, idk_send)

print ("idk read")
ret = read_xrsp()

print ("Second send")
send_to_topic(1, second_send)

print ("Second read")
ret = read_xrsp()

print ("Echo send")
send_to_topic(1, echo_send)

print ("First 5 send")
send_to_topic(5, first_5)

print ("Second 5 send")
send_to_topic(5, second_5)

print ("Waiting for user to accept...")

while True:
    print ("5 read")
    ret = read_xrsp()
    if len(ret) > 0:
        break

print ("Done?")

print ("USB3 send")
send_to_topic(1, send_usb3)

print ("USB3 read")
ret = read_xrsp()

print ("USB3_2 send")
send_to_topic(1, send_usb3_2)

print ("USB3_2 read")
ret = read_xrsp()

print ("USB3_3 send")
send_to_topic(1, send_usb3_3)

print ("USB3_3 read")
ret = read_xrsp()

print ("Echo send")
send_to_topic(1, echo_send)

print ("1A send 1")
send_to_topic(0x1A, send_1a_1)

print ("1A send 2")
send_to_topic(0x1A, send_1a_2)

print ("1A read")
ret = read_xrsp()

print ("1 send")
send_to_topic(1, idk_send_2)

print ("2 send")
send_to_topic(2, send_2)


print ("last reads")
for i in range(0, 100):
    print ("last read", i)
    ret = read_xrsp()
